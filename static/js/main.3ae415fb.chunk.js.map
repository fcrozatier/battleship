{"version":3,"sources":["components/Ship.jsx","components/Cell.jsx","modules/Ship.js","modules/Gameboard.js","components/Board.jsx","modules/Player.js","modules/useGame.js","components/ChoosePlayers.jsx","components/Feedback.jsx","components/DashBoard.jsx","App.jsx","index.jsx"],"names":["Ship","dnd","unit","canRotate","rotate","style","v","width","height","ship","length","useDrag","item","type","id","drag","dndFeatures","ref","onDoubleClick","className","marginLeft","marginTop","fontSize","defaultProps","Cell","drawShip","hit","onClick","onDrop","onCanDrop","onCanRotate","onRotate","useDrop","accept","drop","canDrop","collect","monitor","isOver","classes","backgroundColor","border","onKeyDown","role","tabIndex","Math","random","hits","isSunk","size","fleet","createBoard","board","Array","fill","forEach","index","canHPosition","endIdx","floor","canVPosition","end","position","push","canReposition","find","reposition","idx","randomize","map","tried","receiveAttack","shipId","fleetSunk","every","shipsLeft","reduce","partial","current","unitIndices","positions","i","carrier","battleship","destroyer","submarine","patrol","Board","boardInit","gameboard","updateBoard","cell","includes","handleDrop","handleRotate","drawBoard","Gameboard","isBot","name","remainingSlots","from","keys","landedHits","validAttack","player","attackPosition","hitUnit","splice","indexOf","landedIndices","landed","Object","values","arr","val","hasAdjacentLanding","first","j","other","abs","pickRandom","pickAdjacent","directions","randomLanded","filter","el","isLandedCell","pickNeighbour","a","b","direction","inf","sup","AIAttack","pass","adj","hasLost","attack","humanPass","useGame","useState","players","setPlayers","gameboards","setGameboards","Player","player1","setPlayer1","player2","setPlayer2","player1Turn","setPlayer1Turn","message","setMessage","switchPlayers","prev","winner","reset","num","gameEnded","player2Pass","playing","opponent","setMap","keepPlaying","ChoosePlayers","Feedback","info","DashBoard","handleClick","App","setGame","loading","setLoading","count","setCount","initializeGame","updatePlayerBoard","counterId","setInterval","setTimeout","clearInterval","countingDown","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"4PAKA,SAASA,EAAT,GAEI,IADFC,EACC,EADDA,IAAKC,EACJ,EADIA,KAAMC,EACV,EADUA,UAAWC,EACrB,EADqBA,OAEhBC,EAAQH,EAAKI,EACf,CACAC,MAAO,OACPC,OAAO,GAAD,OAAwB,GAAnBN,EAAKO,KAAKC,OAAf,OAEN,CACAH,MAAM,GAAD,OAAwB,GAAnBL,EAAKO,KAAKC,OAAf,MACLF,OAAQ,QARX,EAWgBG,YAAQ,CACvBC,KAAM,CAAEC,KAAM,OAAQC,GAAIZ,EAAKO,KAAKK,MAD7BC,EAXR,oBAeKC,EAAcf,EAAM,CAAEgB,IAAKF,EAAMG,cAAe,kBAAMd,MAAa,GAEzE,OACE,6CAAKC,MAAOA,EAAOc,UAAU,QAAWH,GAAxC,aACGf,GAAOE,GACN,cAAC,IAAD,CACEE,MAAO,CAAEe,WAAY,MAAOC,UAAW,MAAOC,SAAU,aAmBlEtB,EAAKuB,aAAe,CAClBtB,KAAK,EACLE,WAAW,EACXC,OAAQ,aACRF,KAAM,IAGOF,QCjDf,SAASwB,EAAT,GAUI,IATFtB,EASC,EATDA,KACAuB,EAQC,EARDA,SACAC,EAOC,EAPDA,IACAC,EAMC,EANDA,QACA1B,EAKC,EALDA,IACA2B,EAIC,EAJDA,OACAC,EAGC,EAHDA,UACAC,EAEC,EAFDA,YACAC,EACC,EADDA,SACC,EACmCC,YAAQ,CAC1CC,OAAQ,OACRC,KAAM,SAACtB,GACLgB,EAAOhB,EAAKE,KAEdqB,QAAS,SAACvB,GAAD,OAAUiB,EAAUjB,EAAKE,KAClCsB,QAAS,SAACC,GAAD,MAAc,CACrBF,UAAWE,EAAQF,UACnBG,SAAUD,EAAQC,aATrB,0BACQH,EADR,EACQA,QAASG,EADjB,EACiBA,OAAUJ,EAD3B,KAaGK,EAAU,OACdA,GAAWd,EAAW,aAAe,GACrCc,GAAWb,EAAM,OAAS,GAE1B,IAAMrB,EAAQ,CACZmC,gBAAiBL,GAAW,qBAC5BM,OACGH,GAAUH,EAAW,kBAClBG,IAAWH,GAAW,iBAG9B,OACE,qBACElB,IAAKiB,EACL7B,MAAOA,EACPc,UAAWoB,EACXZ,QAASA,EACTe,UAAWf,EACXgB,KAAK,SACLC,SAAS,KAPX,SASY,OAAT1C,GACC,cAAC,EAAD,CACED,IAAKA,EACLC,KAAMA,EACNC,UAAW2B,EAAY5B,EAAKO,KAAKK,IACjCV,OAAQ,kBAAM2B,EAAS7B,EAAKO,KAAKK,SAmB3CU,EAAKD,aAAe,CAClBrB,MAAM,EACNuB,UAAU,EACVC,KAAK,EACLzB,KAAK,EACL0B,QAAS,aACTE,UAAW,aACXC,YAAa,aACbF,OAAQ,aACRG,SAAU,cAGGP,Q,QCrFA,WAACd,GAAsC,IAA9BI,EAA6B,uDAAR,IAAhB+B,KAAKC,SAC5BC,EAAO,EAELrB,EAAM,WACVqB,GAAQ,GAGJC,EAAS,kBAAMD,GAAQrC,GAE7B,MAAO,CACLI,KACAkC,SACAtB,MACAqB,OACArC,W,SCXW,aAAgB,IAAfuC,EAAc,uDAAP,GACfF,EAAO,GACPG,EAAQ,GAERC,EAAc,WAClB,IAAMC,EAAQC,MAAMJ,EAAOA,GAAMK,KAAK,MAItC,OAHAJ,EAAMK,SAAQ,SAACrD,GACbkD,EAAMlD,EAAKsD,OAAStD,KAEfkD,GAGHK,EAAe,SAACD,EAAO/C,GAC3B,IAAMiD,EAASF,EAAQ/C,EAAKC,OAAS,EAGrC,GAAIgD,GAAM,SAAIT,EAAQ,GAAG,OAAO,EAGhC,GAAIJ,KAAKc,MAAMH,EAAQP,KAAUJ,KAAKc,MAAMD,EAAST,GAAO,OAAO,EAP/B,oBAUjBC,GAViB,IAUpC,2BAA0B,CAAC,IAAhBhD,EAAe,QAExB,GAAIA,EAAKO,KAAKK,KAAOL,EAAKK,IAAOZ,EAAKI,GAU/B,GAAIJ,EAAKO,KAAKK,KAAOL,EAAKK,IAAMZ,EAAKI,EAAG,CAE7C,GACEJ,EAAKsD,OAASA,GACXtD,EAAKsD,OAAStD,EAAKO,KAAKC,OAAS,GAAKuC,GAAQO,GAG/CA,EAAQP,GAAQ/C,EAAKsD,MAAQP,GAC1BS,EAAST,GAAQ/C,EAAKsD,MAAQP,EAEjC,OAAO,EAGX,GACE/C,EAAKsD,OAASE,GACXxD,EAAKsD,OAAStD,EAAKO,KAAKC,OAAS,GAAKuC,GAAQS,GAG/CF,EAAQP,GAAQ/C,EAAKsD,MAAQP,GAC1BS,EAAST,GAAQ/C,EAAKsD,MAAQP,EAEjC,OAAO,OA/B4B,CACvC,GAAI/C,EAAKsD,OAASA,GAAStD,EAAKsD,MAAQtD,EAAKO,KAAKC,OAAS,GAAK8C,EAC9D,OAAO,EAET,GACEtD,EAAKsD,OAASE,GACXxD,EAAKsD,MAAQtD,EAAKO,KAAKC,OAAS,GAAKgD,EAExC,OAAO,IApBuB,8BAiDpC,OAAO,GAGHE,EAAe,SAACJ,EAAO/C,GAC3B,IAAMoD,EAAML,GAAS/C,EAAKC,OAAS,GAAKuC,EAGxC,GAAIY,GAAG,SAAIZ,EAAQ,GACjB,OAAO,EAL2B,oBASjBC,GATiB,IASpC,2BAA0B,CAAC,IAAhBhD,EAAe,QAExB,GAAIA,EAAKO,KAAKK,KAAOL,EAAKK,IAAMZ,EAAKI,GACnC,GAAIJ,EAAKsD,MAAQP,IAASO,EAAQP,EAAM,CACtC,GACE/C,EAAKsD,OAASA,GACXtD,EAAKsD,OAAStD,EAAKO,KAAKC,OAAS,GAAKuC,GAAQO,EAEjD,OAAO,EAET,GACEtD,EAAKsD,OAASK,GACX3D,EAAKsD,OAAStD,EAAKO,KAAKC,OAAS,GAAKuC,GAAQY,EAEjD,OAAO,QAGN,GAAI3D,EAAKO,KAAKK,KAAOL,EAAKK,KAAOZ,EAAKI,EAAG,CAE9C,GAAIkD,GAAStD,EAAKsD,OAAStD,EAAKsD,OAASK,GAErC3D,EAAKsD,MAAQP,GAAQO,EAAQP,GAC1BO,EAAQP,IAAS/C,EAAKsD,MAAQtD,EAAKO,KAAKC,OAAS,GAAKuC,EAEzD,OAAO,EAGX,GACEO,GAAStD,EAAKsD,MAAQtD,EAAKO,KAAKC,OAAS,GACtCR,EAAKsD,MAAQtD,EAAKO,KAAKC,OAAS,GAAKmD,GAGtC3D,EAAKsD,MAAQP,GAAQO,EAAQP,GAC1BO,EAAQP,IAAS/C,EAAKsD,MAAQtD,EAAKO,KAAKC,OAAS,GAAKuC,EAEzD,OAAO,IA5CqB,8BAkDpC,OAAO,GAGHa,EAAW,SAACN,EAAO/C,GAAqB,IAAfH,EAAc,yDACtCA,GAAKsD,EAAaJ,EAAO/C,KAAYH,GAAKmD,EAAaD,EAAO/C,KACjEyC,EAAMa,KAAK,CAAEtD,OAAM+C,QAAOlD,OAIxB0D,EAAgB,SAACR,EAAO1C,GAAQ,IAAD,EACfoC,EAAMe,MAAK,SAAC/D,GAAD,OAAUA,EAAKO,KAAKK,KAAOA,KAAlDL,EAD2B,EAC3BA,KAAMH,EADqB,EACrBA,EACd,OACGA,GAAKsD,EAAaJ,EAAO/C,KAAYH,GAAKmD,EAAaD,EAAO/C,IAI7DyD,EAAa,SAACV,EAAO1C,GAQzB,OAPIkD,EAAcR,EAAO1C,IACvBoC,EAAMK,SAAQ,SAACrD,EAAMiE,GACfjE,EAAKO,KAAKK,KAAOA,IACnBoC,EAAMiB,GAAKX,MAAQA,MAIlBN,GAGH/C,EAAY,SAACW,GAAQ,IAAD,EACGoC,EAAMe,MAAK,SAAC/D,GAAD,OAAUA,EAAKO,KAAKK,KAAOA,KAAzD0C,EADgB,EAChBA,MAAO/C,EADS,EACTA,KAAMH,EADG,EACHA,EACrB,OACGA,GAAKmD,EAAaD,EAAO/C,KAAYH,GAAKsD,EAAaJ,EAAO/C,IAI7DL,EAAS,SAACU,GAQd,OAPIX,EAAUW,IACZoC,EAAMK,SAAQ,SAACrD,EAAMiE,GACfjE,EAAKO,KAAKK,KAAOA,IACnBoC,EAAMiB,GAAK7D,GAAK4C,EAAMiB,GAAK7D,MAI1B4C,GAGHkB,EAAY,WAehB,OAdAlB,EAAMK,SAAQ,SAACrD,EAAMiE,GACnB,IAEIX,EAFElD,IAAMuC,KAAKc,MAAsB,EAAhBd,KAAKC,UACtBuB,EAAM/D,EAAIsD,EAAeH,EAE3Ba,EAAQ,EACZ,GACEA,GAAS,EACTd,EAAQX,KAAKc,MAAMd,KAAKC,SAALD,KAAA,IAAgBI,EAAQ,WACnCoB,EAAIb,EAAOtD,EAAKO,OAAS6D,GAAS,KACxCD,EAAIb,EAAOtD,EAAKO,QAClByC,EAAMiB,GAAK7D,EAAIA,EACf4C,EAAMiB,GAAKX,MAAQA,MAGhB,GAGHe,EAAgB,SAACf,GAAW,IAAD,gBACZN,GADY,IAC/B,2BAA0B,CAAC,IAAhBhD,EAAe,QACxB,IACGA,EAAKI,GACHJ,EAAKsD,OAASA,GACdA,GAAStD,EAAKsD,MAAQtD,EAAKO,KAAKC,OAAS,EAI5C,OAFAR,EAAKO,KAAKiB,MACVqB,EAAKgB,KAAKP,GACHtD,EAAKO,KAAKK,GAEnB,GACEZ,EAAKI,GACFkD,EAAQP,IAAS/C,EAAKsD,MAAQP,GAC9B/C,EAAKsD,OAASA,GACdA,GAAStD,EAAKsD,OAAStD,EAAKO,KAAKC,OAAS,GAAKuC,EAIlD,OAFA/C,EAAKO,KAAKiB,MACVqB,EAAKgB,KAAKP,GACHtD,EAAKO,KAAKK,IAnBU,8BAuB/B,OADAiC,EAAKgB,KAAKP,IACH,GAGHR,EAAS,SAACwB,GAAD,OAAYtB,EAAMe,MAAK,SAAC/D,GAAD,OAAUA,EAAKO,KAAKK,KAAO0D,KAAQ/D,KAAKuC,UAExEyB,EAAY,kBAAMvB,EAAMwB,OAAM,SAACxE,GAAD,OAAUA,EAAKO,KAAKuC,aAElD2B,EAAY,kBAAMzB,EAAM0B,QAC5B,SAACC,EAASC,GAAV,OAAsBD,EAAUC,EAAQrE,KAAKuC,WAC7CE,EAAMxC,SAGFqE,EAAc,WAClB,IAAMC,EAAY,GAOlB,OANA9B,EAAMK,SAAQ,SAACrD,GACb,IAAK,IAAI+E,EAAI,EAAGA,EAAI/E,EAAKO,KAAKC,OAAQuE,GAAK,EAAG,CAC5C,IAAMzB,EAAQtD,EAAKI,EAAIJ,EAAKsD,MAAQyB,EAAIhC,EAAO/C,EAAKsD,MAAQyB,EAC5DD,EAAUjB,KAAKP,OAGZwB,GAIT,GAAI/B,GAAQ,EAAG,CACb,IAAMiC,EAAUlF,EAAK,EAAG,WAClBmF,EAAanF,EAAK,EAAG,cACrBoF,EAAYpF,EAAK,EAAG,aACpBqF,EAAYrF,EAAK,EAAG,aACpBsF,EAAStF,EAAK,EAAG,UAEvB8D,EAAS,GAAIoB,GAAS,GACtBpB,EAAS,EAAGqB,GACZrB,EAAS,GAAIsB,GACbtB,EAAS,EAAGuB,GAAW,GACvBvB,EAAS,GAAIwB,GAAQ,GACrBlB,IAGF,MAAO,CACLJ,gBACA7D,YACAgD,cACAD,QACAuB,YACA1B,OACAC,SACAc,WACAM,YACAG,gBACAL,aACA9D,SACAuE,YACAI,gBC3PEQ,EAAQ,SAAC,GAER,IADLC,EACI,EADJA,UAAWvF,EACP,EADOA,IAAKwF,EACZ,EADYA,UAAW9D,EACvB,EADuBA,QAAS+D,EAChC,EADgCA,YAmCpC,OACE,qCACE,qBAAKvE,UAAS,qBAAgBlB,EAAM,YAAc,IAAlD,SAvBc,WAChB,IAAMmD,EAAQqC,EAAUtC,cAChBJ,EAAS0C,EAAT1C,KACR,OAAOK,EAAMiB,KAAI,SAACsB,EAAMV,GAAP,OACf,cAAC,EAAD,CAEE/E,KAAMyF,EACNlE,SAAUgE,EAAUV,cAAca,SAASX,GAC3CvD,IAAKqB,EAAK6C,SAASX,GACnBtD,QAAS,WACPA,EAAQsD,IAEVhF,IAAKA,EACL2B,OAAQ,SAACd,GAAD,OAzBK,SAACmE,EAAGnE,GACrB4E,EAAY,2BAAKD,GAAN,IAAiBvC,MAAOuC,EAAUvB,WAAWe,EAAGnE,MAwBvC+E,CAAWZ,EAAGnE,IAC9Be,UAAW,SAACf,GAAD,OAAQ2E,EAAUzB,cAAciB,EAAGnE,IAC9CgB,YAAa,SAAChB,GAAD,OAAQ2E,EAAUtF,UAAUW,IACzCiB,SAAU,SAACjB,GAAD,OAxBK,SAACA,GACpB4E,EAAY,2BAAKD,GAAN,IAAiBvC,MAAOuC,EAAUrF,OAAOU,MAuB9BgF,CAAahF,KAXV,IAAhB+B,KAAKC,aAmBTiD,KAEF9F,GACC,sBAAKkB,UAAU,cAAf,UACE,wBAAQA,UAAU,MAAMN,KAAK,SAASc,QAhCzB,WACnB+D,EAAY,2BAAKD,GAAN,IAAiBvC,MAAOuC,EAAUrB,gBA+BvC,oBAIA,wBACEjD,UAAU,MACVN,KAAK,SACLc,QAAS,kBAAM6D,EAAUC,IAH3B,6BAsBVF,EAAMhE,aAAe,CACnBiE,UAAW,aACXvF,KAAK,EACLwF,UAAWO,IACXrE,QAAS,aACT+D,YAAa,cAGAH,Q,QChFA,aAAuD,IAAtDzE,EAAqD,uDAAhC,GAAhB+B,KAAKC,SAAe2C,EAA4B,uDAAhBO,IAC7CC,EAAe,OAAPnF,EACRoF,EAAOpF,EACPqF,EAAiB9C,MAAM+C,KAAK,IAAI/C,MAAM,KAAKgD,QAC3CC,EAAa,GAEbC,EAAc,SAACC,EAAQhD,GAAT,OAAoBgD,EAAOf,UAAU1C,KAAK6C,SAASpC,IAEvE,SAASiD,EAAeD,EAAQhD,GAC9B,IAAMkD,EAAUF,EAAOf,UAAUlB,cAAcf,GAC3CkD,IACFJ,EAAWI,GAAWJ,EAAWI,GAAX,sBACdJ,EAAWI,IADG,CACOlD,IACzB,CAACA,GACDgD,EAAOf,UAAUzC,OAAO0D,WACnBJ,EAAWI,IAGtBP,EAAeQ,OAAOR,EAAeS,QAAQpD,GAAQ,GAGvD,IAAMqD,EAAgB,WACpB,IAAMC,EAAS,GAEf,OADAC,OAAOC,OAAOV,GAAY/C,SAAQ,SAAC0D,GAAD,OAASA,EAAI1D,SAAQ,SAAC2D,GAAD,OAASJ,EAAO/C,KAAKmD,SACrEJ,GAGHK,EAAqB,WAEzB,IADA,IAAML,EAASD,IACN5B,EAAI,EAAGA,EAAI6B,EAAOpG,OAAQuE,GAAK,EAEtC,IADA,IAAMmC,EAAQN,EAAO7B,GACZoC,EAAIpC,EAAI,EAAGoC,EAAIP,EAAOpG,OAAQ2G,GAAK,EAAG,CAC7C,IAAMC,EAAQR,EAAOO,GACrB,GAAgC,IAA5BxE,KAAK0E,IAAID,EAAQF,IAA4C,KAA5BvE,KAAK0E,IAAID,EAAQF,GACpD,MAAO,CAACA,EAAOE,GAIrB,OAAO,GAGHE,EAAa,kBAAMrB,EAAetD,KAAKc,MAAMd,KAAKC,SAAWqD,EAAezF,UAE5E+G,EAAe,WACnB,IAEIxC,EAFAyC,EAAa,EAAE,EAAG,GAAI,GAAI,IACxBZ,EAASD,IAEf,EAAG,CACD,IAAMc,EAAeb,EAAOjE,KAAKc,MAAMd,KAAKC,SAAWgE,EAAOpG,SAGxB,IAAlCmC,KAAKc,MAAMgE,EAAe,MAC5BD,EAAaA,EAAWE,QAAO,SAACC,GAAD,OAAgB,KAARA,MAGH,IAAlChF,KAAKc,MAAMgE,EAAe,MAC5BD,EAAaA,EAAWE,QAAO,SAACC,GAAD,OAAe,KAAPA,MAGrCF,EAAe,KAAO,IACxBD,EAAaA,EAAWE,QAAO,SAACC,GAAD,OAAgB,IAARA,MAGrCF,EAAe,KAAO,IACxBD,EAAaA,EAAWE,QAAO,SAACC,GAAD,OAAe,IAAPA,MAGzC5C,EAAI0C,EADoBD,EAAW7E,KAAKc,MAAMd,KAAKC,SAAW4E,EAAWhH,gBAEjEyF,EAAeP,SAASX,IAClC,OAAOA,GAGH6C,EAAe,SAACtE,GAAD,OAAWqD,IAAgBjB,SAASpC,IAEnDuE,EAAgB,SAAC,GAIrB,IAJiC,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KAC1BC,EAAYrF,KAAK0E,IAAIU,EAAID,GAC3BG,EAAMH,EACNI,EAAMH,EACHH,EAAaM,IAClBA,GAAOF,EAET,KAAOJ,EAAaK,IAClBA,GAAOD,EAET,OAAI/B,EAAeP,SAASuC,GAAaA,EACrChC,EAAeP,SAASwC,GAAaA,EAClCX,EAAaU,EAAMD,IAG5B,SAASG,EAAS7B,EAAQ8B,GACxB,GAAIA,EAAM,OAAO9B,EAAOf,UAExB,IACM8C,EAAMpB,IASZV,EAAeD,EAPwB,IAAnCO,OAAOV,KAAKC,GAAY5F,OAClB8G,IACCe,EACDR,EAAcQ,GAEdd,KAKZ,IAAMe,EAAU,kBAAM/C,EAAUhB,aAE1BgE,EAAS,SAACjC,GACd,GAAIgC,IAAW,OAAOhC,EAAOf,UAE7B,GAAIQ,EACFoC,EAAS7B,EAAD,6CACH,CACL,IAAMkC,KAAY,qFACbA,GAAanC,EAAYC,EAAD,0CAC3BC,EAAeD,EAAD,yCAGlB,OAAOA,EAAOf,WAGhB,MAAO,CACLgD,SACAxC,QACAuC,UACA/C,YACAS,OACAK,gBCnDWoC,EA3EC,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACbC,EADa,KACJC,EADI,OAEgBF,mBAAS,GAFzB,mBAEbG,EAFa,KAEDC,EAFC,OAGUJ,mBAASK,EAAO,YAH1B,mBAGbC,EAHa,KAGJC,EAHI,OAIUP,mBAC5BK,EAAmB,IAAZJ,EAAgB,UAAY,OALjB,mBAIbO,EAJa,KAIJC,EAJI,OAOkBT,oBAAS,GAP3B,mBAObU,EAPa,KAOAC,EAPA,OAQUX,mBAAS,IARnB,mBAQbY,EARa,KAQJC,EARI,KAkBdC,EAAgB,WACpBH,GAAe,SAACI,GAAD,OAAWA,MAGtBC,EAAS,WACb,OAAIR,EAAQZ,UAAkBU,EAAQhD,OAClCgD,EAAQV,WAAkBY,EAAQlD,MA+BxC,MAAO,CACL,CACE6C,aACAS,UACAX,UACAK,UACAE,UACAE,cACAO,MArDU,SAACC,GACbhB,EAAWgB,GACXd,EAAc,GACdG,EAAWF,EAAO,YAClBI,EAAWJ,EAAe,IAARa,EAAY,UAAY,OAC1CP,GAAe,IAiDbP,gBACAF,aACAK,aACAE,aACAK,gBACAE,UAzCY,SAACpG,GACf,IAAMuG,IAAcH,IACpB,GAAgB,IAAZf,EAAe,CACjB,IAAMmB,GAAed,EAAQ3C,YAAY6C,EAAS5F,IAAUuG,EAC5DN,EAAWO,EAAc,aAAe,IACxCX,EAAW,2BACND,GADK,IAER3D,UAAWyD,EAAQT,OAAOW,EAAS5F,EAAOuG,MAE5CZ,EAAW,2BACND,GADK,IAERzD,UAAW2D,EAAQX,OAAOS,EAASc,WAEhC,GAAgB,IAAZnB,EAAe,CACxB,IAAMoB,EAAUX,EAAcJ,EAAUE,EAClCc,EAAWZ,EAAcF,EAAUF,EACnCiB,EAASb,EAAcD,EAAaF,EACpCiB,GAAeH,EAAQ1D,YAAY2D,EAAU1G,GACnDiG,EAAWW,EAAc,aAAe,IACxCD,EAAO,2BACFD,GADC,IAEJzE,UAAWwE,EAAQxB,OAAOyB,EAAU1G,EAAOuG,MAExCK,GAAgBR,KAAUF,QCnDrC,SAASW,EAAT,GAAqC,IAAZ1I,EAAW,EAAXA,QACvB,OACE,sBAAKR,UAAU,cAAf,UACE,wBAAQA,UAAU,MAAMN,KAAK,SAASc,QAAS,kBAAMA,EAAQ,IAA7D,sBACA,wBAAQR,UAAU,MAAMN,KAAK,SAASc,QAAS,kBAAMA,EAAQ,IAA7D,0BASN0I,EAAc9I,aAAe,CAC3BI,QAAS,cAGI0I,QCjBf,SAASC,EAAT,GAEI,IACEd,EAFJX,EACC,EADDA,QAASE,EACR,EADQA,WAAYwB,EACpB,EADoBA,KAAMjB,EAC1B,EAD0BA,YAAaM,EACvC,EADuCA,OA6CxC,OA1CKf,EAEMA,GAAWE,IAAeF,EACnCW,EACE,qCACE,qBAAIrI,UAAU,UAAd,mBAEG4H,EAAa,EACb,KAHH,sBAMA,qBAAK5H,UAAU,eAAf,SACE,qBAAIA,UAAU,OAAd,UACE,qDACA,gEAKC0H,GAAWE,IAAeF,IAAYe,EAC/CJ,EACE,qCACE,qBAAIrI,UAAU,UAAd,mBAEGmI,EAAc,KAAO,KAFxB,UAKA,mBAAGnI,UAAU,eAAb,SAA6BoJ,OAGxBX,IACTJ,EACE,qCACE,qBAAIrI,UAAU,UAAd,UACGyI,EACA,IAFH,WAKA,uBAAOzI,UAAU,eAAjB,wCArCJqI,EAAU,oBAAIrI,UAAU,UAAd,wBAyCL,wBAAQA,UAAU,WAAlB,SAA8BqI,IAWvCc,EAAS/I,aAAe,CACtBwH,WAAY,EACZwB,KAAM,GACNjB,aAAa,EACbT,QAAS,EACTe,QAAQ,GAGKU,QChEf,SAASE,EAAT,GAEI,IADFtB,EACC,EADDA,QAASE,EACR,EADQA,QAASE,EACjB,EADiBA,YAAamB,EAC9B,EAD8BA,YAE/B,OACE,sBAAKtJ,UAAU,iBAAf,UACE,sBAAKA,UAAS,UAAKmI,EAAc,WAAa,eAA9C,UACE,qBAAKnI,UAAU,cAAf,mBAAiC+H,EAAQhD,KAAzC,YACA,cAAC,EAAD,CAAOT,UAAWyD,EAAQzD,UAAW9D,QAAS8I,IAC9C,sBAAKtJ,UAAU,OAAf,wBAEG+H,EAAQzD,UAAUd,kBAGvB,sBAAKxD,UAAS,UAAKmI,EAAc,cAAgB,YAAjD,UACE,qBAAKnI,UAAU,cAAf,mBAAiCiI,EAAQlD,KAAzC,YACA,cAAC,EAAD,CAAOT,UAAW2D,EAAQ3D,UAAW9D,QAAS8I,IAC9C,sBAAKtJ,UAAU,OAAf,wBAEGiI,EAAQ3D,UAAUd,qBAc7B6F,EAAUjJ,aAAe,CACvB+H,aAAa,EACbmB,YAAa,cAGAD,Q,MCoEAE,MApGf,WAAgB,IAAD,EAiBT/B,IAjBS,0BAGTI,EAHS,EAGTA,WACAS,EAJS,EAITA,QACAX,EALS,EAKTA,QACAK,EANS,EAMTA,QACAE,EAPS,EAOTA,QACAE,EARS,EAQTA,YACAO,EATS,EASTA,MACAb,EAVS,EAUTA,cACAG,EAXS,EAWTA,WACAE,EAZS,EAYTA,WACAK,EAbS,EAaTA,cACAE,EAdS,EAcTA,OAEFe,EAhBW,OAkBiB/B,oBAAS,GAlB1B,mBAkBNgC,EAlBM,KAkBGC,EAlBH,OAmBajC,qBAnBb,mBAmBNkC,EAnBM,KAmBCC,EAnBD,KAqBPC,EAAiB,SAAClB,GACtBD,EAAMC,IAGFmB,EAAoB,SAACxF,GACzB0D,EAAWG,EAAcL,EAAOC,EAAQhD,KAAMT,GAAayD,GAC3DG,EAAWC,EAAcF,EAAUH,EAAOG,EAAQlD,KAAMT,KA8B1D,OACE,sBAAKtE,UAAU,MAAf,UACE,cAAC,EAAD,CACE0H,QAASA,EACTE,WAAYA,EACZO,YAAaA,EACbiB,KAAMf,EACNI,OAAQA,OAIRf,GAAW,cAAC,EAAD,CAAelH,QAASqJ,MAGlCnC,GAAWE,IAAeF,GAC3B,cAAC,EAAD,CACE5I,KAAG,EACH8I,WAAYA,EACZtD,UAAW6D,EAAcJ,EAAQzD,UAAY2D,EAAQ3D,UACrDC,YAAauF,EACbzF,UA/CU,SAACC,GACjBwF,EAAkBxF,GAClBuD,GAAc,SAACW,GAAD,OAAUA,EAAO,KACf,IAAZd,GAAea,SAiDdb,GAAWE,IAAeF,IAAY+B,GACvC,cAAC,EAAD,CACE1B,QAASA,EACTE,QAASA,EACTE,YAAaA,EACbmB,YArCY,SAACjH,GACdoG,MACHe,EAAQnH,GACQ,IAAZqF,GAjBa,WACnBgC,GAAW,GACXE,EAAS,GAET,IAAMG,EAAYC,aAAY,WAC5BJ,GAAS,SAACpB,GAAD,OAAUA,EAAO,OACzB,KAEHyB,YAAW,WACTP,GAAW,GACXQ,cAAcH,KACb,KAMkBI,OAuClBV,IAAYhB,KAAY,2CAAYkB,EAAZ,OAGxBlB,KAAY,cAAC,EAAD,CAAejI,QAASqJ,Q,MCjG3CO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAaC,QAASC,IAAtB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.3ae415fb.chunk.js","sourcesContent":["import React from 'react';\nimport { PropTypes, bool } from 'prop-types';\nimport { useDrag } from 'react-dnd';\nimport { GrRotateLeft } from 'react-icons/gr';\n\nfunction Ship({\n  dnd, unit, canRotate, rotate,\n}) {\n  const style = unit.v\n    ? {\n      width: '42px',\n      height: `${unit.ship.length * 41}px`,\n    }\n    : {\n      width: `${unit.ship.length * 41}px`,\n      height: '42px',\n    };\n\n  const [, drag] = useDrag({\n    item: { type: 'ship', id: unit.ship.id },\n  });\n\n  const dndFeatures = dnd ? { ref: drag, onDoubleClick: () => rotate() } : {};\n\n  return (\n    <div style={style} className=\"ship\" {...dndFeatures}>\n      {dnd && canRotate && (\n        <GrRotateLeft\n          style={{ marginLeft: '8px', marginTop: '8px', fontSize: '24px' }}\n        />\n      )}\n    </div>\n  );\n}\n\nShip.propTypes = {\n  dnd: PropTypes.bool,\n  canRotate: bool,\n  rotate: PropTypes.func,\n  unit: PropTypes.shape({\n    index: PropTypes.number,\n    // eslint-disable-next-line react/forbid-prop-types\n    ship: PropTypes.object,\n    v: PropTypes.bool,\n  }),\n};\n\nShip.defaultProps = {\n  dnd: false,\n  canRotate: false,\n  rotate: () => {},\n  unit: {},\n};\n\nexport default Ship;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDrop } from 'react-dnd';\nimport Ship from './Ship';\n\nfunction Cell({\n  unit,\n  drawShip,\n  hit,\n  onClick,\n  dnd,\n  onDrop,\n  onCanDrop,\n  onCanRotate,\n  onRotate,\n}) {\n  const [{ canDrop, isOver }, drop] = useDrop({\n    accept: 'ship',\n    drop: (item) => {\n      onDrop(item.id);\n    },\n    canDrop: (item) => onCanDrop(item.id),\n    collect: (monitor) => ({\n      canDrop: !!monitor.canDrop(),\n      isOver: !!monitor.isOver(),\n    }),\n  });\n\n  let classes = 'cell';\n  classes += drawShip ? ' draw-ship' : '';\n  classes += hit ? ' hit' : '';\n\n  const style = {\n    backgroundColor: canDrop && 'rgb(248, 249, 231)',\n    border:\n      (isOver && canDrop && '1px solid green')\n      || (isOver && !canDrop && '1px solid red'),\n  };\n\n  return (\n    <div\n      ref={drop}\n      style={style}\n      className={classes}\n      onClick={onClick}\n      onKeyDown={onClick}\n      role=\"button\"\n      tabIndex=\"-1\"\n    >\n      {unit !== null && (\n        <Ship\n          dnd={dnd}\n          unit={unit}\n          canRotate={onCanRotate(unit.ship.id)}\n          rotate={() => onRotate(unit.ship.id)}\n        />\n      )}\n    </div>\n  );\n}\n\nCell.propTypes = {\n  unit: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  drawShip: PropTypes.bool,\n  hit: PropTypes.bool,\n  onClick: PropTypes.func,\n  dnd: PropTypes.bool,\n  onCanDrop: PropTypes.func,\n  onCanRotate: PropTypes.func,\n  onDrop: PropTypes.func,\n  onRotate: PropTypes.func,\n};\n\nCell.defaultProps = {\n  unit: false,\n  drawShip: false,\n  hit: false,\n  dnd: false,\n  onClick: () => {},\n  onCanDrop: () => {},\n  onCanRotate: () => {},\n  onDrop: () => {},\n  onRotate: () => {},\n};\n\nexport default Cell;\n","export default (length, id = Math.random() * 100) => {\n  let hits = 0;\n\n  const hit = () => {\n    hits += 1;\n  };\n\n  const isSunk = () => hits >= length;\n\n  return {\n    id,\n    isSunk,\n    hit,\n    hits,\n    length,\n  };\n};\n","/* eslint-disable no-restricted-syntax */\nimport Ship from './Ship';\n\nexport default (size = 10) => {\n  const hits = [];\n  const fleet = [];\n\n  const createBoard = () => {\n    const board = Array(size * size).fill(null);\n    fleet.forEach((unit) => {\n      board[unit.index] = unit;\n    });\n    return board;\n  };\n\n  const canHPosition = (index, ship) => {\n    const endIdx = index + ship.length - 1;\n\n    // Cannot position outside grid\n    if (endIdx >= size ** 2) return false;\n\n    // Cannot wrap\n    if (Math.floor(index / size) !== Math.floor(endIdx / size)) return false;\n\n    // Check positions are free\n    for (const unit of fleet) {\n      // for other horizontal, head or tail of ship should not end in their middle of these\n      if (unit.ship.id !== ship.id && !unit.v) {\n        if (unit.index <= index && unit.index + unit.ship.length - 1 >= index) {\n          return false;\n        }\n        if (\n          unit.index <= endIdx\n          && unit.index + unit.ship.length - 1 >= endIdx\n        ) {\n          return false;\n        }\n      } else if (unit.ship.id !== ship.id && unit.v) {\n        // for other vertical, their head modulo size should not be in the middle of ship\n        if (\n          unit.index <= index\n          && unit.index + (unit.ship.length - 1) * size >= index\n        ) {\n          if (\n            index % size <= unit.index % size\n            && endIdx % size >= unit.index % size\n          ) {\n            return false;\n          }\n        }\n        if (\n          unit.index <= endIdx\n          && unit.index + (unit.ship.length - 1) * size >= endIdx\n        ) {\n          if (\n            index % size <= unit.index % size\n            && endIdx % size >= unit.index % size\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const canVPosition = (index, ship) => {\n    const end = index + (ship.length - 1) * size;\n\n    // Cannot position outside grid\n    if (end >= size ** 2) {\n      return false;\n    }\n\n    // Check positions are free\n    for (const unit of fleet) {\n      // for other vertical, should not be aligned with head of tail of ship in their middle\n      if (unit.ship.id !== ship.id && unit.v) {\n        if (unit.index % size === index % size) {\n          if (\n            unit.index <= index\n            && unit.index + (unit.ship.length - 1) * size >= index\n          ) {\n            return false;\n          }\n          if (\n            unit.index <= end\n            && unit.index + (unit.ship.length - 1) * size >= end\n          ) {\n            return false;\n          }\n        }\n      } else if (unit.ship.id !== ship.id && !unit.v) {\n        // for other horizontal, their head or tail modulo size should not surround index\n        if (index <= unit.index && unit.index <= end) {\n          if (\n            unit.index % size <= index % size\n            && index % size <= (unit.index + unit.ship.length - 1) % size\n          ) {\n            return false;\n          }\n        }\n        if (\n          index <= unit.index + unit.ship.length - 1\n          && unit.index + unit.ship.length - 1 <= end\n        ) {\n          if (\n            unit.index % size <= index % size\n            && index % size <= (unit.index + unit.ship.length - 1) % size\n          ) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const position = (index, ship, v = false) => {\n    if ((v && canVPosition(index, ship)) || (!v && canHPosition(index, ship))) {\n      fleet.push({ ship, index, v });\n    }\n  };\n\n  const canReposition = (index, id) => {\n    const { ship, v } = fleet.find((unit) => unit.ship.id === id);\n    return (\n      (v && canVPosition(index, ship)) || (!v && canHPosition(index, ship))\n    );\n  };\n\n  const reposition = (index, id) => {\n    if (canReposition(index, id)) {\n      fleet.forEach((unit, idx) => {\n        if (unit.ship.id === id) {\n          fleet[idx].index = index;\n        }\n      });\n    }\n    return fleet;\n  };\n\n  const canRotate = (id) => {\n    const { index, ship, v } = fleet.find((unit) => unit.ship.id === id);\n    return (\n      (v && canHPosition(index, ship)) || (!v && canVPosition(index, ship))\n    );\n  };\n\n  const rotate = (id) => {\n    if (canRotate(id)) {\n      fleet.forEach((unit, idx) => {\n        if (unit.ship.id === id) {\n          fleet[idx].v = !fleet[idx].v;\n        }\n      });\n    }\n    return fleet;\n  };\n\n  const randomize = () => {\n    fleet.forEach((unit, idx) => {\n      const v = !!Math.floor(Math.random() * 2);\n      const map = v ? canVPosition : canHPosition;\n      let index;\n      let tried = 0;\n      do {\n        tried += 1;\n        index = Math.floor(Math.random() * size ** 2);\n      } while (!map(index, unit.ship) || tried <= 100);\n      if (map(index, unit.ship)) {\n        fleet[idx].v = v;\n        fleet[idx].index = index;\n      }\n    });\n    return this;\n  };\n\n  const receiveAttack = (index) => {\n    for (const unit of fleet) {\n      if (\n        !unit.v\n        && unit.index <= index\n        && index <= unit.index + unit.ship.length - 1\n      ) {\n        unit.ship.hit();\n        hits.push(index);\n        return unit.ship.id;\n      }\n      if (\n        unit.v\n        && index % size === unit.index % size\n        && unit.index <= index\n        && index <= unit.index + (unit.ship.length - 1) * size\n      ) {\n        unit.ship.hit();\n        hits.push(index);\n        return unit.ship.id;\n      }\n    }\n    hits.push(index);\n    return false;\n  };\n\n  const isSunk = (shipId) => fleet.find((unit) => unit.ship.id === shipId).ship.isSunk();\n\n  const fleetSunk = () => fleet.every((unit) => unit.ship.isSunk());\n\n  const shipsLeft = () => fleet.reduce(\n    (partial, current) => partial - current.ship.isSunk(),\n    fleet.length,\n  );\n\n  const unitIndices = () => {\n    const positions = [];\n    fleet.forEach((unit) => {\n      for (let i = 0; i < unit.ship.length; i += 1) {\n        const index = unit.v ? unit.index + i * size : unit.index + i;\n        positions.push(index);\n      }\n    });\n    return positions;\n  };\n\n  // default config\n  if (size >= 7) {\n    const carrier = Ship(5, 'carrier');\n    const battleship = Ship(4, 'battleship');\n    const destroyer = Ship(3, 'destroyer');\n    const submarine = Ship(3, 'submarine');\n    const patrol = Ship(2, 'patrol');\n\n    position(22, carrier, true);\n    position(4, battleship);\n    position(55, destroyer);\n    position(1, submarine, true);\n    position(36, patrol, true);\n    randomize();\n  }\n\n  return {\n    canReposition,\n    canRotate,\n    createBoard,\n    fleet,\n    fleetSunk,\n    hits,\n    isSunk,\n    position,\n    randomize,\n    receiveAttack,\n    reposition,\n    rotate,\n    shipsLeft,\n    unitIndices,\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\nimport Gameboard from '../modules/Gameboard';\n\nconst Board = ({\n  boardInit, dnd, gameboard, onClick, updateBoard,\n}) => {\n  const handleDrop = (i, id) => {\n    updateBoard({ ...gameboard, fleet: gameboard.reposition(i, id) });\n  };\n\n  const handleRotate = (id) => {\n    updateBoard({ ...gameboard, fleet: gameboard.rotate(id) });\n  };\n\n  const handleRandom = () => {\n    updateBoard({ ...gameboard, fleet: gameboard.randomize() });\n  };\n\n  const drawBoard = () => {\n    const board = gameboard.createBoard();\n    const { hits } = gameboard;\n    return board.map((cell, i) => (\n      <Cell\n        key={Math.random() * 1000}\n        unit={cell}\n        drawShip={gameboard.unitIndices().includes(i)}\n        hit={hits.includes(i)}\n        onClick={() => {\n          onClick(i);\n        }}\n        dnd={dnd}\n        onDrop={(id) => handleDrop(i, id)}\n        onCanDrop={(id) => gameboard.canReposition(i, id)}\n        onCanRotate={(id) => gameboard.canRotate(id)}\n        onRotate={(id) => handleRotate(id)}\n      />\n    ));\n  };\n\n  return (\n    <>\n      <div className={`board-grid ${dnd ? 'dnd-board' : ''}`}>\n        {drawBoard()}\n      </div>\n      {dnd && (\n        <div className=\"btn-wrapper\">\n          <button className=\"btn\" type=\"button\" onClick={handleRandom}>\n            Random\n          </button>\n\n          <button\n            className=\"btn\"\n            type=\"button\"\n            onClick={() => boardInit(gameboard)}\n          >\n            Continue\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n\nBoard.propTypes = {\n  boardInit: PropTypes.func,\n  dnd: PropTypes.bool,\n  // eslint-disable-next-line react/forbid-prop-types\n  gameboard: PropTypes.object,\n  onClick: PropTypes.func,\n  updateBoard: PropTypes.func,\n};\n\nBoard.defaultProps = {\n  boardInit: () => {},\n  dnd: false,\n  gameboard: Gameboard(),\n  onClick: () => {},\n  updateBoard: () => {},\n};\n\nexport default Board;\n","import Gameboard from './Gameboard';\n\nexport default (id = Math.random() * 10, gameboard = Gameboard()) => {\n  const isBot = id === 'AI';\n  const name = id;\n  const remainingSlots = Array.from(new Array(100).keys());\n  const landedHits = {};\n\n  const validAttack = (player, index) => !player.gameboard.hits.includes(index);\n\n  function attackPosition(player, index) {\n    const hitUnit = player.gameboard.receiveAttack(index);\n    if (hitUnit) {\n      landedHits[hitUnit] = landedHits[hitUnit]\n        ? [...landedHits[hitUnit], index]\n        : [index];\n      if (player.gameboard.isSunk(hitUnit)) {\n        delete landedHits[hitUnit];\n      }\n    }\n    remainingSlots.splice(remainingSlots.indexOf(index), 1);\n  }\n\n  const landedIndices = () => {\n    const landed = [];\n    Object.values(landedHits).forEach((arr) => arr.forEach((val) => landed.push(val)));\n    return landed;\n  };\n\n  const hasAdjacentLanding = () => {\n    const landed = landedIndices();\n    for (let i = 0; i < landed.length; i += 1) {\n      const first = landed[i];\n      for (let j = i + 1; j < landed.length; j += 1) {\n        const other = landed[j];\n        if (Math.abs(other - first) === 1 || Math.abs(other - first) === 10) {\n          return [first, other];\n        }\n      }\n    }\n    return false;\n  };\n\n  const pickRandom = () => remainingSlots[Math.floor(Math.random() * remainingSlots.length)];\n\n  const pickAdjacent = () => {\n    let directions = [-1, 1, -10, 10];\n    const landed = landedIndices();\n    let i;\n    do {\n      const randomLanded = landed[Math.floor(Math.random() * landed.length)];\n\n      // if random choice is in top row\n      if (Math.floor(randomLanded / 10) === 0) {\n        directions = directions.filter((el) => el !== -10);\n      }\n      // if random choice is in bottom row\n      if (Math.floor(randomLanded / 10) === 9) {\n        directions = directions.filter((el) => el !== 10);\n      }\n      // if random choice is in left  column\n      if (randomLanded % 10 === 0) {\n        directions = directions.filter((el) => el !== -1);\n      }\n      // if random choice is in left  column\n      if (randomLanded % 10 === 9) {\n        directions = directions.filter((el) => el !== 1);\n      }\n      const randomDirection = directions[Math.floor(Math.random() * directions.length)];\n      i = randomLanded + randomDirection;\n    } while (!remainingSlots.includes(i));\n    return i;\n  };\n\n  const isLandedCell = (index) => landedIndices().includes(index);\n\n  const pickNeighbour = ([a, b]) => {\n    const direction = Math.abs(b - a);\n    let inf = a;\n    let sup = b;\n    while (isLandedCell(sup)) {\n      sup += direction;\n    }\n    while (isLandedCell(inf)) {\n      inf -= direction;\n    }\n    if (remainingSlots.includes(inf)) return inf;\n    if (remainingSlots.includes(sup)) return sup;\n    return pickAdjacent(inf + direction);\n  };\n\n  function AIAttack(player, pass) {\n    if (pass) return player.gameboard;\n\n    let index;\n    const adj = hasAdjacentLanding();\n\n    if (Object.keys(landedHits).length === 0) {\n      index = pickRandom();\n    } else if (adj) {\n      index = pickNeighbour(adj);\n    } else {\n      index = pickAdjacent();\n    }\n    attackPosition(player, index);\n  }\n\n  const hasLost = () => gameboard.fleetSunk();\n\n  const attack = (player, ...opts) => {\n    if (hasLost()) return player.gameboard;\n\n    if (isBot) {\n      AIAttack(player, opts[0]);\n    } else {\n      const humanPass = opts[1] ? opts[1] : false;\n      if (!humanPass && validAttack(player, opts[0])) {\n        attackPosition(player, opts[0]);\n      }\n    }\n    return player.gameboard;\n  };\n\n  return {\n    attack,\n    isBot,\n    hasLost,\n    gameboard,\n    name,\n    validAttack,\n  };\n};\n","import { useState } from 'react';\nimport Player from './Player';\n\nconst useGame = () => {\n  const [players, setPlayers] = useState(0);\n  const [gameboards, setGameboards] = useState(0);\n  const [player1, setPlayer1] = useState(Player('Player1'));\n  const [player2, setPlayer2] = useState(\n    Player(players === 2 ? 'Player2' : 'AI'),\n  );\n  const [player1Turn, setPlayer1Turn] = useState(true);\n  const [message, setMessage] = useState('');\n\n  const reset = (num) => {\n    setPlayers(num);\n    setGameboards(0);\n    setPlayer1(Player('Player1'));\n    setPlayer2(Player(num === 2 ? 'Player2' : 'AI'));\n    setPlayer1Turn(true);\n  };\n\n  const switchPlayers = () => {\n    setPlayer1Turn((prev) => !prev);\n  };\n\n  const winner = () => {\n    if (player2.hasLost()) return player1.name;\n    if (player1.hasLost()) return player2.name;\n    return false;\n  };\n\n  const setGame = (index) => {\n    const gameEnded = !!winner();\n    if (players === 1) {\n      const player2Pass = !player1.validAttack(player2, index) || gameEnded;\n      setMessage(player2Pass ? 'Try again!' : '');\n      setPlayer2({\n        ...player2,\n        gameboard: player1.attack(player2, index, gameEnded),\n      });\n      setPlayer1({\n        ...player1,\n        gameboard: player2.attack(player1, player2Pass),\n      });\n    } else if (players === 2) {\n      const playing = player1Turn ? player1 : player2;\n      const opponent = player1Turn ? player2 : player1;\n      const setMap = player1Turn ? setPlayer2 : setPlayer1;\n      const keepPlaying = !playing.validAttack(opponent, index);\n      setMessage(keepPlaying ? 'Try again!' : '');\n      setMap({\n        ...opponent,\n        gameboard: playing.attack(opponent, index, gameEnded),\n      });\n      if (!keepPlaying && !winner()) switchPlayers();\n    }\n  };\n\n  return [\n    {\n      gameboards,\n      message,\n      players,\n      player1,\n      player2,\n      player1Turn,\n      reset,\n      setGameboards,\n      setPlayers,\n      setPlayer1,\n      setPlayer2,\n      switchPlayers,\n      winner,\n    },\n    setGame,\n  ];\n};\n\nexport default useGame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ChoosePlayers({ onClick }) {\n  return (\n    <div className=\"btn-wrapper\">\n      <button className=\"btn\" type=\"button\" onClick={() => onClick(1)}>1 Player</button>\n      <button className=\"btn\" type=\"button\" onClick={() => onClick(2)}>2 Players</button>\n    </div>\n  );\n}\n\nChoosePlayers.propTypes = {\n  onClick: PropTypes.func,\n};\n\nChoosePlayers.defaultProps = {\n  onClick: () => {},\n};\n\nexport default ChoosePlayers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Feedback({\n  players, gameboards, info, player1Turn, winner,\n}) {\n  let message;\n  if (!players) {\n    message = <h2 className=\"heading\">Battlefied</h2>;\n  } else if (players && gameboards !== players) {\n    message = (\n      <>\n        <h2 className=\"heading\">\n          Player\n          {gameboards + 1}\n          {': '}\n          place your ships\n        </h2>\n        <div className=\"info-wrapper\">\n          <ul className=\"info\">\n            <li>Drag&apos;n drop to move</li>\n            <li>Double click to rotate</li>\n          </ul>\n        </div>\n      </>\n    );\n  } else if (players && gameboards === players && !winner) {\n    message = (\n      <>\n        <h2 className=\"heading\">\n          Player\n          {player1Turn ? '1 ' : '2 '}\n          turn\n        </h2>\n        <p className=\"info-wrapper\">{info}</p>\n      </>\n    );\n  } else if (winner) {\n    message = (\n      <>\n        <h2 className=\"heading\">\n          {winner}\n          {' '}\n          wins!\n        </h2>\n        <small className=\"info-wrapper\">Click below to rematch</small>\n      </>\n    );\n  }\n  return <header className=\"feedback\">{message}</header>;\n}\n\nFeedback.propTypes = {\n  gameboards: PropTypes.number,\n  info: PropTypes.string,\n  player1Turn: PropTypes.bool,\n  players: PropTypes.number,\n  winner: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nFeedback.defaultProps = {\n  gameboards: 0,\n  info: '',\n  player1Turn: true,\n  players: 0,\n  winner: false,\n};\n\nexport default Feedback;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Board from './Board';\n\nfunction DashBoard({\n  player1, player2, player1Turn, handleClick,\n}) {\n  return (\n    <div className=\"display-boards\">\n      <div className={`${player1Turn ? 'my-board' : 'enemy-board'}`}>\n        <div className=\"whose-board\">{`${player1.name} board`}</div>\n        <Board gameboard={player1.gameboard} onClick={handleClick} />\n        <div className=\"info\">\n          Ships left:\n          {player1.gameboard.shipsLeft()}\n        </div>\n      </div>\n      <div className={`${player1Turn ? 'enemy-board' : 'my-board'}`}>\n        <div className=\"whose-board\">{`${player2.name} board`}</div>\n        <Board gameboard={player2.gameboard} onClick={handleClick} />\n        <div className=\"info\">\n          Ships left:\n          {player2.gameboard.shipsLeft()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nDashBoard.propTypes = {\n  player1Turn: PropTypes.bool,\n  player1: PropTypes.shape().isRequired,\n  player2: PropTypes.shape().isRequired,\n  handleClick: PropTypes.func,\n};\n\nDashBoard.defaultProps = {\n  player1Turn: true,\n  handleClick: () => {},\n};\n\nexport default DashBoard;\n","import React, { useState } from 'react';\nimport Board from './components/Board';\nimport useGame from './modules/useGame';\nimport ChoosePlayers from './components/ChoosePlayers';\nimport Feedback from './components/Feedback';\nimport Player from './modules/Player';\nimport DashBoard from './components/DashBoard';\nimport './app.css';\n\nfunction App() {\n  const [\n    {\n      gameboards,\n      message,\n      players,\n      player1,\n      player2,\n      player1Turn,\n      reset,\n      setGameboards,\n      setPlayer1,\n      setPlayer2,\n      switchPlayers,\n      winner,\n    },\n    setGame,\n  ] = useGame();\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState();\n\n  const initializeGame = (num) => {\n    reset(num);\n  };\n\n  const updatePlayerBoard = (gameboard) => {\n    setPlayer1(player1Turn ? Player(player1.name, gameboard) : player1);\n    setPlayer2(player1Turn ? player2 : Player(player2.name, gameboard));\n  };\n\n  const saveBoard = (gameboard) => {\n    updatePlayerBoard(gameboard);\n    setGameboards((prev) => prev + 1);\n    if (players === 2) switchPlayers();\n  };\n\n  const countingDown = () => {\n    setLoading(true);\n    setCount(2);\n\n    const counterId = setInterval(() => {\n      setCount((prev) => prev - 1);\n    }, 1000);\n\n    setTimeout(() => {\n      setLoading(false);\n      clearInterval(counterId);\n    }, 2000);\n  };\n\n  const handleClick = (index) => {\n    if (!winner()) {\n      setGame(index);\n      if (players === 2) countingDown();\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <Feedback\n        players={players}\n        gameboards={gameboards}\n        player1Turn={player1Turn}\n        info={message}\n        winner={winner()}\n      />\n\n      {/* If number of players is not set or there is a winner */}\n      {!players && <ChoosePlayers onClick={initializeGame} />}\n\n      {/* If the number of initialized boards does not equal the number of players */}\n      {!!players && gameboards !== players && (\n        <Board\n          dnd\n          gameboards={gameboards}\n          gameboard={player1Turn ? player1.gameboard : player2.gameboard}\n          updateBoard={updatePlayerBoard}\n          boardInit={saveBoard}\n        />\n      )}\n\n      {/* Main game phase */}\n      {!!players && gameboards === players && !loading && (\n        <DashBoard\n          player1={player1}\n          player2={player2}\n          player1Turn={player1Turn}\n          handleClick={handleClick}\n        />\n      )}\n\n      {/* When loading */}\n      {loading && !winner() && <div>{`in ${count}s`}</div>}\n\n      {/* When there is a winner */}\n      {winner() && <ChoosePlayers onClick={initializeGame} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}